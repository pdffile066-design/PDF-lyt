// YEH AAPKA NODE.JS SERVER HAI

const express = require('express');
const multer = require('multer');
const fetch = require('node-fetch');
const FormData = require('form-data');
const fs = require('fs');
const cors = require('cors'); // CORS errors se bachne ke liye

const app = express();
const upload = multer({ dest: 'uploads/' }); // Temporary folder for uploads

app.use(cors()); // Allow requests from your website

// ------------------- !! YAHAN APNI KEYS PASTE KAREIN !! -------------------
const ILOVEPDF_PUBLIC_KEY = 'project_public_0aede18ae1643e26807ef6914a7e9cac_0Yt4o1ccf7e6770840d28e9c7799da5e0a5bb';
const ILOVEPDF_SECRET_KEY = 'secret_key_3525faa7ffa01bde42f90d2b808105ea_2sIcKa8a2601cb5225c038d54d7ef0edeae3c';
// -------------------------------------------------------------------------

// Function to get Authentication Token from I Love PDF
async function getAuthToken() {
    const formData = new FormData();
    formData.append('public_key', ILOVEPDF_PUBLIC_KEY);
    formData.append('secret_key', ILOVEPDF_SECRET_KEY);

    const response = await fetch('https://api.ilovepdf.com/v1/auth', { method: 'POST', body: formData });
    const data = await response.json();
    return data.token;
}

// The API endpoint that your website will call
app.post('/api/convert-pdf-to-word', upload.single('pdfFile'), async (req, res) => {
    if (!req.file) return res.status(400).send('No file uploaded.');

    try {
        console.log("File received, getting auth token...");
        const token = await getAuthToken();

        console.log("Starting task...");
        const startResponse = await fetch('https://api.ilovepdf.com/v1/start/pdftoword', {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        const taskData = await startResponse.json();
        const { server, task: taskId } = taskData;
        const uploadUrl = `https://${server}/v1/upload`;
        const processUrl = `https://${server}/v1/process`;
        const downloadUrl = `https://${server}/v1/download/${taskId}`;

        console.log("Uploading file to I Love PDF...");
        const uploadFormData = new FormData();
        uploadFormData.append('task', taskId);
        uploadFormData.append('file', fs.createReadStream(req.file.path));
        await fetch(uploadUrl, { method: 'POST', headers: { 'Authorization': `Bearer ${token}` }, body: uploadFormData });

        console.log("Processing file...");
        await fetch(processUrl, {
            method: 'POST',
            headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' },
            body: JSON.stringify({ task: taskId })
        });

        console.log("Downloading converted file...");
        const downloadResponse = await fetch(downloadUrl, { headers: { 'Authorization': `Bearer ${token}` } });

        res.setHeader('Content-Disposition', `attachment; filename="${req.file.originalname.replace('.pdf', '.docx')}"`);
        downloadResponse.body.pipe(res);

        // Clean up the temporary file
        fs.unlinkSync(req.file.path);

    } catch (error) {
        console.error('Error during conversion:', error);
        res.status(500).send('An error occurred during the conversion process.');
    }
});

// Serve the index.html file
app.get('/', (req, res) => {
    res.sendFile(__dirname + '/index.html');
});

const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Server is running! Open http://localhost:${PORT} in your browser.`);
});